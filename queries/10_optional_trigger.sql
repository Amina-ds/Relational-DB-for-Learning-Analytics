-- ЗАПРОС 10: (Опционально) Триггер
-- Задача: Автоматически логировать смену группы у студентов.

-- =================================================================================
-- Шаг 1: Создание триггерной функции
-- =================================================================================
CREATE OR REPLACE FUNCTION log_group_change()
RETURNS TRIGGER AS $$
BEGIN
    -- Сравниваем старое значение group_code со новым.
    -- OLD и NEW - это специальные переменные, доступные внутри триггерной функции.
    IF OLD.group_code IS DISTINCT FROM NEW.group_code THEN
        -- Если значения не совпадают, вставляем запись в наш лог.
        INSERT INTO audit_log(event_description)
        VALUES(
            'Student ' || OLD.full_name || ' (ID: ' || OLD.student_id || ') ' ||
            'was moved from group ' || OLD.group_code || ' to group ' || NEW.group_code
        );
    END IF;
    -- Возвращаем новую строку, чтобы операция UPDATE продолжилась.
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- =================================================================================
-- Шаг 2: Создание самого триггера
-- Привязываем функцию к таблице students.
-- =================================================================================
-- Удаляем триггер, если он уже существует, чтобы избежать ошибок при повторном запуске
DROP TRIGGER IF EXISTS trg_student_group_change ON students;

CREATE TRIGGER trg_student_group_change
-- Указываем, что он должен срабатывать ПОСЛЕ операции UPDATE
AFTER UPDATE ON students
-- Триггер будет срабатывать для КАЖДОЙ измененной строки
FOR EACH ROW
-- Выполняем нашу заранее созданную функцию
EXECUTE FUNCTION log_group_change();


-- =================================================================================
-- Шаг 3: Демонстрация работы триггера
-- =================================================================================

-- Сначала посмотрим, что в логах сейчас (должно быть пусто или записи от транзакций)
SELECT * FROM audit_log ORDER BY log_id DESC;

-- Теперь переведем студента с ID = 1 в новую группу 'DA-22'
UPDATE students
SET group_code = 'DA-22'
WHERE student_id = 1;

-- Проверяем лог еще раз. Там должна появиться новая запись, созданная автоматически!
SELECT * FROM audit_log ORDER BY log_id DESC;
